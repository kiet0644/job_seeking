generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  JOB_SEEKER
  EMPLOYER
  ADMIN
  MODERATOR
  PREMIUM_JOB_SEEKER
  PREMIUM_EMPLOYER
}

model User {
  id             String   @id @map("_id") @default(auto()) @db.ObjectId
  email          String   @unique
  passwordHash   String
  fullName       String
  phone          String?
  avatar         String?
  address        String?
  role           Role     @default(JOB_SEEKER)
  emailVerified  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Quan hệ với các bảng khác
  jobSeekerProfile   JobSeekerProfile?
  employerProfile    EmployerProfile?
  applications       Application[]
  reviewsGiven       Review[]        @relation("UserReviews")
  reviewsAsEmployer  Review[]        @relation("UserEmployers")
  sentMessages       ChatMessage[]   @relation("UserSentMessages")
  receivedMessages   ChatMessage[]   @relation("UserReceivedMessages")
  notifications      Notification[]
  bookmarks          Bookmark[]
  resumes            Resume[]
  subscriptions      Subscription[]
}

model Application {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  jobId     String
  status    String   @default("pending") // pending | accepted | rejected
  appliedAt DateTime @default(now())

  // Quan hệ với User
  user User @relation(fields: [userId], references: [id])

  // Quan hệ với Job
  job Job @relation(fields: [jobId], references: [id])
}

model Job {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  applications Application[]
  bookmarks    Bookmark[]
}

model JobSeekerProfile {
  id               String   @id @map("_id") @default(auto()) @db.ObjectId
  userId           String   @unique
  education        String[]
  skills           String[]
  careerObjective  String?

  // Quan hệ với User
  user User @relation(fields: [userId], references: [id])
}

model EmployerProfile {
  id             String   @id @map("_id") @default(auto()) @db.ObjectId
  userId         String   @unique
  companyName    String   // Bắt buộc
  companyAddress String   // Bắt buộc
  companyWebsite String?  // Không bắt buộc
  companyLogo    String?  // Không bắt buộc
  contactPerson  String   // Bắt buộc
  contactEmail   String   // Bắt buộc
  contactPhone   String   // Bắt buộc

  // Quan hệ với User
  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Bookmark {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  jobId     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
}

model Review {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  reviewerId  String
  employerId  String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())

  reviewer    User     @relation("UserReviews", fields: [reviewerId], references: [id])
  employer    User     @relation("UserEmployers", fields: [employerId], references: [id])
}

model Resume {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  url       String   // Link tới file CV
  title     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  fromUserId String
  toUserId   String
  content    String
  sentAt     DateTime @default(now())

  fromUser   User     @relation("UserSentMessages", fields: [fromUserId], references: [id])
  toUser     User     @relation("UserReceivedMessages", fields: [toUserId], references: [id])
}

model Subscription {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  userId     String
  type       String   // premium, employer, etc.
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean  @default(true)
  user       User     @relation(fields: [userId], references: [id])
}
